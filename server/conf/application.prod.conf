include "application.conf"

play.crypto.secret="ZzATvUJVVbQ70@XV!bW8neqZlv8IkKL"

# Allow all proxies for Heroku so that X-Forwarded headers can be read by Play
# ~~~~~
play.http.forwarded.trustedProxies=["0.0.0.0/0", "::/0"]

db.default.url="jdbc:postgresql://localhost:5432/gigahexdb"
db.default.username=${?DB_USER}
db.default.password=${?DB_PASSWORD}
db.default.poolInitialSize=5
db.default.poolMaxSize=20
db.default.poolConnectionTimeoutMillis=3000
db.default.poolValidationQuery="select 1 as one"
db.default.poolFactoryName="commons-dbcp2"


appRootUrl="https://app.gigahex.com"

play.filters.cors {
  allowedOrigins = ["https://app.gigahex.com", "https://gigahex.com", "https://www.gigahex.com", "http://localhost:3000"]
  allowedHttpMethods = ["GET", "POST", "PUT", "OPTIONS", "DELETE"]
}

play {

  server {

    # The root directory for the Play server instance. This value can
    # be set by providing a path as the first argument to the Play server
    # launcher script. See `ServerConfig.loadConfiguration`.
    dir = ${?user.dir}

    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9000
      port = ${?PLAY_HTTP_PORT}
      port = ${?http.port}

      # The interface address to bind to.
      address = "0.0.0.0"
      address = ${?PLAY_HTTP_ADDRESS}
      address = ${?http.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = 75 seconds
    }

    # HTTPS configuration
    https {

      # The HTTPS port of the server.
      port = 9443
      port = ${?PLAY_HTTPS_PORT}
      port = ${?https.port}

      # The interface address to bind to
      address = "0.0.0.0"
      address = ${?PLAY_HTTPS_ADDRESS}
      address = ${?https.address}

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = ${play.server.http.idleTimeout}

      # The SSL engine provider
      engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
      engineProvider = ${?play.http.sslengineprovider}

      # HTTPS keystore configuration, used by the default SSL engine provider
      keyStore {
        # The path to the keystore
        path = ${?KEYSTORE_PATH}

        # The type of the keystore
        type = "JKS"
        type = ${?https.keyStoreType}

        # The password for the keystore
        password = ""
        password = ${?KEYSTORE_PASSWORD}

        # The algorithm to use. If not set, uses the platform default algorithm.
        algorithm = ${?https.keyStoreAlgorithm}
      }

      # HTTPS truststore configuration
      trustStore {

        # If true, does not do CA verification on client side certificates
        noCaVerification = false
      }

      # Whether JSSE want client auth mode should be used. This means, the server
      # will request a client certificate, but won't fail if one isn't provided.
      wantClientAuth = false

      # Whether JSSE need client auth mode should be used. This means, the server
      # will request a client certificate, and will fail and terminate the session
      # if one isn't provided.
      needClientAuth = false
    }

    # The path to the process id file created by the server when it runs.
    # If set to "/dev/null" then no pid file will be created.
    pidfile.path = ${play.server.dir}/RUNNING_PID
    pidfile.path = ${?pidfile.path}

    websocket {
      # Maximum allowable frame payload length. Setting this value to your application's
      # requirement may reduce denial of service attacks using long data frames.
      frame.maxLength = 64k
      frame.maxLength = ${?websocket.frame.maxLength}
    }

    debug {
      # If set to true this will attach an attribute to each request containing debug information. If the application
      # fails to load (e.g. due to a compile issue in dev mode), then this configuration value is ignored and the debug
      # information is always attached.
      #
      # Note: This configuration option is not part of Play's public API and is subject to change without the usual
      # deprecation cycle.
      addDebugInfoToRequests = false
    }

    # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
    # number of cookies and size of cookie values.
    max-header-size = 8k

    # If a request contains a Content-Length header it will be checked against this maximum value.
    # If the value of a given Content-Length header exceeds this configured value, the request will not be processed
    # further but instead the error handler will be called with Http status code 413 "Entity too large".
    # If set to infinite or if no Content-Length header exists then no check will take place at all
    # and the request will continue to be processed.
    # Play uses the concept of a `BodyParser` to enforce this limit, so we set it to infinite.
    max-content-length = infinite
  }

  editor = ${?PLAY_EDITOR}

}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
  libsodium = "/usr/local/lib/libsodium.so"
}

aws {
  bucket = "gx-static-content"
  cdn = "https://d2uqnt9f7uda88.cloudfront.net/gigahex/orgs"
  staticLocationKey = "static/gigahex/orgs/"
  accessKey = ${?AWS_KEY_ID}
  secretKey = ${?AWS_SECRET_KEY_ID}
}

gigahex {
  logsDir = "/mnt/disk/ops/gigahex/deployment-logs"
  tmpLocation = "/mnt/disk/ops/gigahex/images"
}

# Play mailer

play.mailer {
  host = "smtp-relay.sendinblue.com"
  port = 587
  tls = true
  tlsRequired = true
  mock = false
  user = "admin@gigahex.com"
  password = "FPRpmLKWA8zVBTQE"
}

silhouette {

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=true
  authenticator.httpOnlyCookie=true
  authenticator.sameSite="None"
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=4 hours
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "GvdkG1F*U$X#" // A unique encryption key
  authenticator.crypter.key = "GvdkG1Fsdfee$X#" // A unique encryption key

  authenticator.fieldName = "X-Auth-Token"
  authenticator.requestParts = ["headers"]
  authenticator.issuerClaim = "gx.launcher"
  authenticator.sharedSecret = "ycg%PGjXMlAXriT8xG#D6AJgvp65CX2b^7qFOs435s3"

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=true // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.sameSite="None"
  oauth1TokenSecretProvider.expirationTime=5 minutes

  oauth1TokenSecretProvider.signer.key = "[changeme]" // A unique encryption key
  oauth1TokenSecretProvider.crypter.key = "[changeme]" // A unique encryption key

  # Social state handler
  socialStateHandler.signer.key = "[changeme]" // A unique encryption key

  # CSRF state item handler settings
  csrfStateItemHandler.cookieName="OAuth2State"
  csrfStateItemHandler.cookiePath="/"
  csrfStateItemHandler.secureCookie=true // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  csrfStateItemHandler.httpOnlyCookie=true
  #csrfStateItemHandler.sameSite="Lax"
  csrfStateItemHandler.expirationTime=5 minutes

  csrfStateItemHandler.signer.key = "[changeme]" // A unique encryption key

  # Facebook provider
  facebook.authorizationURL="https://graph.facebook.com/v2.3/oauth/authorize"
  facebook.accessTokenURL="https://graph.facebook.com/v2.3/oauth/access_token"
  facebook.redirectURL="http://localhost:9000/authenticate/facebook"
  facebook.clientID=""
  facebook.clientID=${?FACEBOOK_CLIENT_ID}
  facebook.clientSecret=""
  facebook.clientSecret=${?FACEBOOK_CLIENT_SECRET}
  facebook.scope="email"

  # Google provider
  google.authorizationURL="https://accounts.google.com/o/oauth2/auth"
  google.accessTokenURL="https://accounts.google.com/o/oauth2/token"
  google.redirectURL="https://app.gigahex.com/oauth/google"
  google.clientID=""
  google.clientID=${?GOOGLE_CLIENT_ID}
  google.clientSecret=""
  google.clientSecret=${?GOOGLE_CLIENT_SECRET}
  google.scope="profile email"

  github {
    authorizationURL="https://github.com/login/oauth/authorize"
    accessTokenURL="https://github.com/login/oauth/access_token"
    redirectURL="https://app.gigahex.com/oauth/github"
    clientID=""
    clientID=${?GITHUB_CLIENT_ID}
    clientSecret=""
    clientSecret=${?GITHUB_CLIENT_SECRET}
    scope="public_profile user:email"
  }

  # VK provider
  vk.authorizationURL="http://oauth.vk.com/authorize"
  vk.accessTokenURL="https://oauth.vk.com/access_token"
  vk.redirectURL="http://localhost:9000/authenticate/vk"
  vk.clientID=""
  vk.clientID=${?VK_CLIENT_ID}
  vk.clientSecret=""
  vk.clientSecret=${?VK_CLIENT_SECRET}
  vk.scope="email"

  # Twitter provider
  twitter.requestTokenURL="https://twitter.com/oauth/request_token"
  twitter.accessTokenURL="https://twitter.com/oauth/access_token"
  twitter.authorizationURL="https://twitter.com/oauth/authenticate"
  twitter.callbackURL="http://localhost:9000/authenticate/twitter"
  twitter.consumerKey=""
  twitter.consumerKey=${?TWITTER_CONSUMER_KEY}
  twitter.consumerSecret=""
  twitter.consumerSecret=${?TWITTER_CONSUMER_SECRET}

  # Xing provider
  xing.requestTokenURL="https://api.xing.com/v1/request_token"
  xing.accessTokenURL="https://api.xing.com/v1/access_token"
  xing.authorizationURL="https://api.xing.com/v1/authorize"
  xing.callbackURL="http://localhost:9000/authenticate/xing"
  xing.consumerKey=""
  xing.consumerKey=${?XING_CONSUMER_KEY}
  xing.consumerSecret=""
  xing.consumerSecret=${?XING_CONSUMER_SECRET}

  # Yahoo provider
  yahoo.providerURL="https://me.yahoo.com/"
  yahoo.callbackURL="http://localhost:9000/authenticate/yahoo"
  yahoo.axRequired={
    "fullname": "http://axschema.org/namePerson",
    "email": "http://axschema.org/contact/email",
    "image": "http://axschema.org/media/image/default"
  }
  yahoo.realm="http://localhost:9000"
}
